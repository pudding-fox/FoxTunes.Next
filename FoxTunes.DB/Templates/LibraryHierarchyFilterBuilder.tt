<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="FoxDb" #>
<#@ import namespace="FoxTunes.Interfaces" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#
if (this.Filter != null)
{
	switch (this.Source)
	{
		case LibraryHierarchyFilterSource.LibraryHierarchyItem:
#>
AND EXISTS
(
	SELECT * 
	FROM "LibraryHierarchyItem_LibraryItem"
	WHERE "LibraryHierarchyItem_LibraryItem"."LibraryHierarchyItem_Id" = "LibraryHierarchyItems"."Id"
<#
			break;
	}
	foreach (var group in this.Filter.Groups)
	{
#>	
AND EXISTS
(
	SELECT * 
	FROM "LibraryItem_MetaDataItem"
		JOIN "MetaDataItems" ON "MetaDataItems"."Id" = "LibraryItem_MetaDataItem"."MetaDataItem_Id"
	WHERE "LibraryItem_MetaDataItem"."LibraryItem_Id" = "LibraryHierarchyItem_LibraryItem"."LibraryItem_Id" AND (
<#
		var first = true;
		foreach (var entry in group.Entries)
		{
			if (first)
			{
				first = false;
			}
			else
			{
#> OR <#
			}
			var numeric = default(int);
			var isNumeric = NumericOperators.Contains(entry.Operator) && int.TryParse(entry.Value, out numeric);
#>("MetaDataItems"."Name" = <#= this.Database.QueryFactory.Dialect.String(entry.Name) #> AND <#
			if (isNumeric)
			{
#>CAST("MetaDataItems"."Value" AS int)<#
			}
			else
			{
#>"MetaDataItems"."Value"<#
			}
			switch (entry.Operator)
			{
				default:
				case FilterParserEntryOperator.Equal:
#> = <#
					break;
				case FilterParserEntryOperator.Greater:
#> > <#					
					break;
				case FilterParserEntryOperator.GreaterEqual:
#> >= <#					
					break;
				case FilterParserEntryOperator.Less:
#> < <#					
					break;
				case FilterParserEntryOperator.LessEqual:
#> <= <#					
					break;
				case FilterParserEntryOperator.Match:
#> LIKE <#					
					break;
			}
#>
<# 
			if (isNumeric)
			{
#><#= numeric #><#
			}
			else
			{
#><#= this.Database.QueryFactory.Dialect.String(entry.Value.Replace(FilterParserResultEntry.BOUNDED_WILDCARD, "_").Replace(FilterParserResultEntry.UNBOUNDED_WILDCARD, "%"))  #><#
			}
#>
)<#
		}
#>))<#		
	}
	switch (this.Source)
	{
		case LibraryHierarchyFilterSource.LibraryHierarchyItem:
#>)<#		
			break;
	}
}
#>